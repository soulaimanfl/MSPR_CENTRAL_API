name: CI/CD Pipeline - Microservices

on:
  push:
    branches: [ develop, main ]
    paths:
      - 'services/service-client/**'
      - 'services/service-produit/**'
      - 'services/service-commande/**'
  pull_request:
    branches: [ develop, main ]
  workflow_dispatch:
    inputs:
      service:
        description: 'Service to build and deploy'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - client
        - produit
        - commande

permissions:
  contents: read
  packages: write
  actions: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Job pour dÃ©tecter les changements
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      client-changed: ${{ steps.changes.outputs.client }}
      produit-changed: ${{ steps.changes.outputs.produit }}
      commande-changed: ${{ steps.changes.outputs.commande }}
    steps:
      - name: Checkout with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Detect changes
        id: changes
        run: |
          if [ "${{ github.event.inputs.service }}" = "all" ] || [ "${{ github.event.inputs.service }}" = "client" ] || git diff --name-only HEAD~1 HEAD | grep -q "^services/service-client/"; then
            echo "client=true" >> $GITHUB_OUTPUT
          else
            echo "client=false" >> $GITHUB_OUTPUT
          fi

          if [ "${{ github.event.inputs.service }}" = "all" ] || [ "${{ github.event.inputs.service }}" = "produit" ] || git diff --name-only HEAD~1 HEAD | grep -q "^services/service-produit/"; then
            echo "produit=true" >> $GITHUB_OUTPUT
          else
            echo "produit=false" >> $GITHUB_OUTPUT
          fi

          if [ "${{ github.event.inputs.service }}" = "all" ] || [ "${{ github.event.inputs.service }}" = "commande" ] || git diff --name-only HEAD~1 HEAD | grep -q "^services/service-commande/"; then
            echo "commande=true" >> $GITHUB_OUTPUT
          else
            echo "commande=false" >> $GITHUB_OUTPUT
          fi

  # Job pour service-client
  build-client:
    if: needs.detect-changes.outputs.client-changed == 'true'
    needs: detect-changes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Build service-client
        working-directory: ./services/service-client
        run: |
          mvn clean test
          mvn package -DskipTests

      - name: Build Docker image - Client
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-client:${{ github.sha }} ./services/service-client
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-client:${{ github.sha }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-client:latest

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker image - Client
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-client:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-client:latest

  # Job pour service-produit
  build-produit:
    if: needs.detect-changes.outputs.produit-changed == 'true'
    needs: detect-changes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Build service-produit
        working-directory: ./services/service-produit
        run: |
          mvn clean test
          mvn package -DskipTests

      - name: Build Docker image - Produit
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-produit:${{ github.sha }} ./services/service-produit
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-produit:${{ github.sha }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-produit:latest

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker image - Produit
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-produit:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-produit:latest

  # Job pour service-commande
  build-commande:
    if: needs.detect-changes.outputs.commande-changed == 'true'
    needs: detect-changes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Build service-commande
        working-directory: ./services/service-commande
        run: |
          mvn clean test
          mvn package -DskipTests

      - name: Build Docker image - Commande
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-commande:${{ github.sha }} ./services/service-commande
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-commande:${{ github.sha }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-commande:latest

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker image - Commande
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-commande:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-commande:latest

  # Job de dÃ©ploiement
  deploy:
    if: github.ref == 'refs/heads/main' && (needs.build-client.result == 'success' || needs.build-produit.result == 'success' || needs.build-commande.result == 'success')
    needs: [build-client, build-produit, build-commande]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Deploy to production
        run: |
          echo "ðŸš€ Deploying microservices to production..."
          echo "âœ… Service Client: ${{ needs.build-client.result }}"
          echo "âœ… Service Produit: ${{ needs.build-produit.result }}"
          echo "âœ… Service Commande: ${{ needs.build-commande.result }}"
          
          # Ici vous pouvez ajouter votre logique de dÃ©ploiement
          # Par exemple : kubectl apply, docker-compose up, etc.
