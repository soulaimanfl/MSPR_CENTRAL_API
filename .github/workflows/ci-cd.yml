name: CI/CD Monorepo - Improved

on:
  push:
    branches: [ develop, master ]
  pull_request:
    branches: [ develop, master ]
  workflow_dispatch:
    inputs:
      service:
        description: 'Service to build and deploy'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - client
        - produit
        - commande
        - frontend

permissions:
  contents: read
  packages: write
  actions: write
  security-events: write

jobs:
  # Job pour détecter les changements
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      client-changed: ${{ steps.changes.outputs.client }}
      produit-changed: ${{ steps.changes.outputs.produit }}
      commande-changed: ${{ steps.changes.outputs.commande }}
      frontend-changed: ${{ steps.changes.outputs.frontend }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Detect changes
        id: changes
        run: |
          # Pour simplifier, exécuter toujours tous les tests
          echo "client=true" >> $GITHUB_OUTPUT
          echo "produit=true" >> $GITHUB_OUTPUT
          echo "commande=true" >> $GITHUB_OUTPUT
          echo "frontend=true" >> $GITHUB_OUTPUT

  # Tests et Build pour service-client
  test-client:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run tests with coverage
        run: |
          cd services/service-client
          mvn clean verify jacoco:report -Dspring.profiles.active=test
        env:
          SPRING_DATASOURCE_URL: jdbc:h2:mem:testdb
          SPRING_DATASOURCE_USERNAME: sa
          SPRING_DATASOURCE_PASSWORD: ""
          JWT_SECRET: test-secret-key

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: services/service-client/target/site/jacoco/jacoco.xml
          flags: service-client

      - name: Build application
        run: |
          cd services/service-client
          mvn clean package -DskipTests

      - name: Build Docker image
        run: |
          cd services/service-client
          docker build -t ghcr.io/${{ github.repository_owner }}/service-client:${{ github.sha }} .

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker image
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/service-client:${{ github.sha }}
          docker push ghcr.io/${{ github.repository_owner }}/service-client:latest

  # Tests et Build pour service-produit
  test-produit:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run tests with coverage
        run: |
          cd services/service-produit
          mvn clean verify jacoco:report -Dspring.profiles.active=test
        env:
          SPRING_DATASOURCE_URL: jdbc:h2:mem:testdb
          SPRING_DATASOURCE_USERNAME: sa
          SPRING_DATASOURCE_PASSWORD: ""
          JWT_SECRET: test-secret-key

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: services/service-produit/target/site/jacoco/jacoco.xml
          flags: service-produit

      - name: Build application
        run: |
          cd services/service-produit
          mvn clean package -DskipTests

      - name: Build Docker image
        run: |
          cd services/service-produit
          docker build -t ghcr.io/${{ github.repository_owner }}/service-produit:${{ github.sha }} .

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker image
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/service-produit:${{ github.sha }}
          docker push ghcr.io/${{ github.repository_owner }}/service-produit:latest

  # Tests et Build pour service-commande
  test-commande:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run tests with coverage
        run: |
          cd services/service-commande
          mvn clean verify jacoco:report -Dspring.profiles.active=test
        env:
          SPRING_DATASOURCE_URL: jdbc:h2:mem:testdb
          SPRING_DATASOURCE_USERNAME: sa
          SPRING_DATASOURCE_PASSWORD: ""
          JWT_SECRET: test-secret-key

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: services/service-commande/target/site/jacoco/jacoco.xml
          flags: service-commande

      - name: Build application
        run: |
          cd services/service-commande
          mvn clean package -DskipTests

      - name: Build Docker image
        run: |
          cd services/service-commande
          docker build -t ghcr.io/${{ github.repository_owner }}/service-commande:${{ github.sha }} .

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker image
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/service-commande:${{ github.sha }}
          docker push ghcr.io/${{ github.repository_owner }}/service-commande:latest

  # Tests et Build pour frontend
  test-frontend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run linting
        run: |
          cd frontend
          npm run lint

      - name: Skip tests (frontend tests removed)
        run: |
          echo "Frontend tests have been removed as requested"

      - name: Build application
        run: |
          cd frontend
          npm run build

      - name: Build Docker image
        run: |
          cd frontend
          docker build -t ghcr.io/${{ github.repository_owner }}/frontend:${{ github.sha }} .

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker image
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/frontend:${{ github.sha }}
          docker push ghcr.io/${{ github.repository_owner }}/frontend:latest

  # Job pour exécuter tous les tests en parallèle
  test-all-services:
    runs-on: ubuntu-latest
    if: always()
    needs: [test-client, test-produit, test-commande, test-frontend]
    steps:
      - name: Check test results
        run: |
          echo "Service-client: ${{ needs.test-client.result }}"
          echo "Service-produit: ${{ needs.test-produit.result }}"
          echo "Service-commande: ${{ needs.test-commande.result }}"
          echo "Frontend: ${{ needs.test-frontend.result }}"
          
          # Vérifier qu'au moins un service a réussi
          if [[ "${{ needs.test-client.result }}" == "success" || "${{ needs.test-produit.result }}" == "success" || "${{ needs.test-commande.result }}" == "success" || "${{ needs.test-frontend.result }}" == "success" ]]; then
            echo "At least one service test passed"
          else
            echo "No service tests passed"
            exit 1
          fi

  # Job pour forcer l'exécution de tous les tests
  test-all-services-forced:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.service == 'all'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run all service tests
        run: |
          echo "Running all service tests..."
          
          # Test service-client
          echo "Testing service-client..."
          cd services/service-client
          mvn clean verify jacoco:report -Dspring.profiles.active=test
          cd ../..
          
          # Test service-produit
          echo "Testing service-produit..."
          cd services/service-produit
          mvn clean verify jacoco:report -Dspring.profiles.active=test
          cd ../..
          
          # Test service-commande
          echo "Testing service-commande..."
          cd services/service-commande
          mvn clean verify jacoco:report -Dspring.profiles.active=test
          cd ../..
        env:
          SPRING_DATASOURCE_URL: jdbc:h2:mem:testdb
          SPRING_DATASOURCE_USERNAME: sa
          SPRING_DATASOURCE_PASSWORD: ""
          JWT_SECRET: test-secret-key

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          files: |
            services/service-client/target/site/jacoco/jacoco.xml
            services/service-produit/target/site/jacoco/jacoco.xml
            services/service-commande/target/site/jacoco/jacoco.xml
          flags: all-services

  # Tests d'intégration
  integration-tests:
    runs-on: ubuntu-latest
    needs: [test-all-services]
    if: always() && needs.test-all-services.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Start services with Docker Compose
        run: |
          docker-compose up -d
          sleep 30  # Wait for services to start

      - name: Run integration tests
        run: |
          # Add your integration tests here
          echo "Running integration tests..."

      - name: Stop services
        run: |
          docker-compose down

  # Tests d'intégration forcés (s'exécute toujours)
  integration-tests-forced:
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Start services with Docker Compose
        run: |
          docker-compose up -d
          sleep 30  # Wait for services to start

      - name: Run integration tests
        run: |
          # Add your integration tests here
          echo "Running integration tests..."

      - name: Stop services
        run: |
          docker-compose down

  # Security scan
  security-scan:
    runs-on: ubuntu-latest
    needs: [test-all-services]
    if: always() && needs.test-all-services.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy (only on master branch)
  deploy:
    runs-on: ubuntu-latest
    needs: [test-all-services, test-all-services-forced, integration-tests, integration-tests-forced, security-scan]
    if: github.ref == 'refs/heads/master' && (needs.test-all-services.result == 'success' || needs.test-all-services-forced.result == 'success') && needs.integration-tests-forced.result == 'success' && needs.security-scan.result == 'success'
    steps:
      - name: Deploy to production
        run: |
          echo "Deploying to production..."
          # Add your deployment logic here
