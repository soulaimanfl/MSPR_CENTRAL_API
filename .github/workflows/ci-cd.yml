name: CI/CD Monorepo - Improved

on:
  push:
    branches: [ develop, master ]
  pull_request:
    branches: [ develop, master ]
  workflow_dispatch:
    inputs:
      service:
        description: 'Service to build and deploy'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - client
        - produit
        - commande
        - frontend

permissions:
  contents: read
  packages: write
  actions: write
  security-events: write

jobs:
  # Job pour détecter les changements
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      client-changed: ${{ steps.changes.outputs.client }}
      produit-changed: ${{ steps.changes.outputs.produit }}
      commande-changed: ${{ steps.changes.outputs.commande }}
      frontend-changed: ${{ steps.changes.outputs.frontend }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Detect changes
        id: changes
        run: |
          # Détecter les changements dans les services
          if git diff --name-only HEAD~1 HEAD | grep -q "^services/service-client/"; then
            echo "client=true" >> $GITHUB_OUTPUT
          else
            echo "client=false" >> $GITHUB_OUTPUT
          fi
          
          if git diff --name-only HEAD~1 HEAD | grep -q "^services/service-produit/"; then
            echo "produit=true" >> $GITHUB_OUTPUT
          else
            echo "produit=false" >> $GITHUB_OUTPUT
          fi
          
          if git diff --name-only HEAD~1 HEAD | grep -q "^services/service-commande/"; then
            echo "commande=true" >> $GITHUB_OUTPUT
          else
            echo "commande=false" >> $GITHUB_OUTPUT
          fi
          
          if git diff --name-only HEAD~1 HEAD | grep -q "^frontend/"; then
            echo "frontend=true" >> $GITHUB_OUTPUT
          else
            echo "frontend=false" >> $GITHUB_OUTPUT
          fi

  # Tests et Build pour service-client
  test-client:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.client-changed == 'true' || needs.detect-changes.outputs.client-changed == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run tests with coverage
        run: |
          cd services/service-client
          mvn clean test jacoco:report -Dspring.profiles.active=test
        env:
          SPRING_DATASOURCE_URL: jdbc:h2:mem:testdb
          SPRING_DATASOURCE_USERNAME: sa
          SPRING_DATASOURCE_PASSWORD: ""
          JWT_SECRET: test-secret-key

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: services/service-client/target/site/jacoco/jacoco.xml
          flags: service-client

      - name: Build application
        run: |
          cd services/service-client
          mvn clean package -DskipTests

      - name: Build Docker image
        run: |
          cd services/service-client
          docker build -t ghcr.io/${{ github.repository_owner }}/service-client:${{ github.sha }} .

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker image
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/service-client:${{ github.sha }}
          docker push ghcr.io/${{ github.repository_owner }}/service-client:latest

  # Tests et Build pour service-produit
  test-produit:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.produit-changed == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run tests with coverage
        run: |
          cd services/service-produit
          mvn clean test jacoco:report -Dspring.profiles.active=test
        env:
          SPRING_DATASOURCE_URL: jdbc:h2:mem:testdb
          SPRING_DATASOURCE_USERNAME: sa
          SPRING_DATASOURCE_PASSWORD: ""
          JWT_SECRET: test-secret-key

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: services/service-produit/target/site/jacoco/jacoco.xml
          flags: service-produit

      - name: Build application
        run: |
          cd services/service-produit
          mvn clean package -DskipTests

      - name: Build Docker image
        run: |
          cd services/service-produit
          docker build -t ghcr.io/${{ github.repository_owner }}/service-produit:${{ github.sha }} .

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker image
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/service-produit:${{ github.sha }}
          docker push ghcr.io/${{ github.repository_owner }}/service-produit:latest

  # Tests et Build pour service-commande
  test-commande:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.commande-changed == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Run tests with coverage
        run: |
          cd services/service-commande
          mvn clean test jacoco:report -Dspring.profiles.active=test
        env:
          SPRING_DATASOURCE_URL: jdbc:h2:mem:testdb
          SPRING_DATASOURCE_USERNAME: sa
          SPRING_DATASOURCE_PASSWORD: ""
          JWT_SECRET: test-secret-key

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: services/service-commande/target/site/jacoco/jacoco.xml
          flags: service-commande

      - name: Build application
        run: |
          cd services/service-commande
          mvn clean package -DskipTests

      - name: Build Docker image
        run: |
          cd services/service-commande
          docker build -t ghcr.io/${{ github.repository_owner }}/service-commande:${{ github.sha }} .

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker image
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/service-commande:${{ github.sha }}
          docker push ghcr.io/${{ github.repository_owner }}/service-commande:latest

  # Tests et Build pour frontend
  test-frontend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend-changed == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Run linting
        run: |
          cd frontend
          npm run lint

      - name: Run tests
        run: |
          cd frontend
          npm test -- --coverage --watchAll=false

      - name: Build application
        run: |
          cd frontend
          npm run build

      - name: Build Docker image
        run: |
          cd frontend
          docker build -t ghcr.io/${{ github.repository_owner }}/frontend:${{ github.sha }} .

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker image
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/frontend:${{ github.sha }}
          docker push ghcr.io/${{ github.repository_owner }}/frontend:latest

  # Tests d'intégration
  integration-tests:
    runs-on: ubuntu-latest
    needs: [test-client, test-produit, test-commande, test-frontend]
    if: always() && (needs.test-client.result == 'success' || needs.test-produit.result == 'success' || needs.test-commande.result == 'success' || needs.test-frontend.result == 'success')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Start services with Docker Compose
        run: |
          docker-compose up -d
          sleep 30  # Wait for services to start

      - name: Run integration tests
        run: |
          # Add your integration tests here
          echo "Running integration tests..."

      - name: Stop services
        run: |
          docker-compose down

  # Security scan
  security-scan:
    runs-on: ubuntu-latest
    needs: [test-client, test-produit, test-commande, test-frontend]
    if: always() && (needs.test-client.result == 'success' || needs.test-produit.result == 'success' || needs.test-commande.result == 'success' || needs.test-frontend.result == 'success')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy (only on master branch)
  deploy:
    runs-on: ubuntu-latest
    needs: [test-client, test-produit, test-commande, test-frontend, integration-tests, security-scan]
    if: github.ref == 'refs/heads/master' && needs.integration-tests.result == 'success' && needs.security-scan.result == 'success'
    steps:
      - name: Deploy to production
        run: |
          echo "Deploying to production..."
          # Add your deployment logic here
