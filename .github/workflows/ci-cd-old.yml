name: CI/CD Monorepo

on:
  push:
    branches: [ develop, master ]
  pull_request:
    branches: [ develop, master ]
  workflow_dispatch:
    inputs:
      service:
        description: 'Service to build and deploy'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - client
        - produit
        - commande
        - frontend

permissions:
  contents: read
  packages: write
  actions: write

jobs:
  # Job pour détecter les changements
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      client-changed: ${{ steps.changes.outputs.client }}
      produit-changed: ${{ steps.changes.outputs.produit }}
      commande-changed: ${{ steps.changes.outputs.commande }}
      frontend-changed: ${{ steps.changes.outputs.frontend }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Detect changes
        id: changes
        run: |
          # Détecter les changements dans les services
          if git diff --name-only HEAD~1 HEAD | grep -q "^services/service-client/"; then
            echo "client=true" >> $GITHUB_OUTPUT
          else
            echo "client=false" >> $GITHUB_OUTPUT
          fi
          
          if git diff --name-only HEAD~1 HEAD | grep -q "^services/service-produit/"; then
            echo "produit=true" >> $GITHUB_OUTPUT
          else
            echo "produit=false" >> $GITHUB_OUTPUT
          fi
          
          if git diff --name-only HEAD~1 HEAD | grep -q "^services/service-commande/"; then
            echo "commande=true" >> $GITHUB_OUTPUT
          else
            echo "commande=false" >> $GITHUB_OUTPUT
          fi
          
          if git diff --name-only HEAD~1 HEAD | grep -q "^frontend/"; then
            echo "frontend=true" >> $GITHUB_OUTPUT
          else
            echo "frontend=false" >> $GITHUB_OUTPUT
          fi

  # Job pour service-client
  build-client:
    if: needs.detect-changes.outputs.client-changed == 'true' || github.event.inputs.service == 'all' || github.event.inputs.service == 'client'
    needs: detect-changes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Debug - List directory structure
        run: |
          echo "=== Current directory ==="
          pwd
          echo "=== Root directory contents ==="
          ls -la
          echo "=== Find all pom.xml files ==="
          find . -name "pom.xml" -type f
          echo "=== Services directory contents ==="
          ls -la services/ || echo "Services directory not found"
          echo "=== Service-client directory contents ==="
          ls -la services/service-client/ || echo "Service-client directory not found"
          echo "=== Check if services exist ==="
          ls -la | grep -i service || echo "No service directories found"

      - name: Build and test service-client
        run: |
          echo "=== Finding service-client directory ==="
          find . -name "service-client" -type d
          echo "=== Finding pom.xml in service-client ==="
          find . -path "*/service-client/pom.xml" -type f
          
          # Try different possible paths
          if [ -d "services/service-client" ]; then
            echo "Using services/service-client"
            cd services/service-client
          elif [ -d "service-client" ]; then
            echo "Using service-client"
            cd service-client
          else
            echo "Service-client directory not found, listing all directories:"
            find . -type d -name "*client*" -o -name "*service*"
            exit 1
          fi
          
          echo "=== Current directory after cd ==="
          pwd
          echo "=== Contents of current directory ==="
          ls -la
          echo "=== Looking for pom.xml ==="
          find . -name "pom.xml" -type f
          echo "=== pom.xml exists? ==="
          ls -la pom.xml
          mvn clean test -Dspring.profiles.active=test
          mvn package -DskipTests
        env:
          SPRING_DATASOURCE_URL: jdbc:h2:mem:testdb
          SPRING_DATASOURCE_USERNAME: sa
          SPRING_DATASOURCE_PASSWORD: ""
          JWT_SECRET: test-secret-key

      - name: Build Docker image for service-client
        run: |
          cd services/service-client
          docker build -t ghcr.io/${{ github.repository_owner }}/service-client:${{ github.sha }} .
          docker tag ghcr.io/${{ github.repository_owner }}/service-client:${{ github.sha }} ghcr.io/${{ github.repository_owner }}/service-client:latest

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker image for service-client
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/service-client:${{ github.sha }}
          docker push ghcr.io/${{ github.repository_owner }}/service-client:latest

  # Job pour service-produit
  build-produit:
    if: needs.detect-changes.outputs.produit-changed == 'true' || github.event.inputs.service == 'all' || github.event.inputs.service == 'produit'
    needs: detect-changes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Debug - List directory structure for produit
        run: |
          echo "=== Services directory contents ==="
          ls -la services/
          echo "=== Service-produit directory contents ==="
          ls -la services/service-produit/

      - name: Build and test service-produit
        run: |
          echo "=== Finding service-produit directory ==="
          find . -name "service-produit" -type d
          echo "=== Finding pom.xml in service-produit ==="
          find . -path "*/service-produit/pom.xml" -type f
          
          # Try different possible paths
          if [ -d "services/service-produit" ]; then
            echo "Using services/service-produit"
            cd services/service-produit
          elif [ -d "service-produit" ]; then
            echo "Using service-produit"
            cd service-produit
          else
            echo "Service-produit directory not found, listing all directories:"
            find . -type d -name "*produit*" -o -name "*service*"
            exit 1
          fi
          
          echo "=== Current directory after cd ==="
          pwd
          echo "=== Contents of current directory ==="
          ls -la
          echo "=== Looking for pom.xml ==="
          find . -name "pom.xml" -type f
          echo "=== pom.xml exists? ==="
          ls -la pom.xml
          mvn clean test -Dspring.profiles.active=test
          mvn package -DskipTests
        env:
          SPRING_DATASOURCE_URL: jdbc:h2:mem:testdb
          SPRING_DATASOURCE_USERNAME: sa
          SPRING_DATASOURCE_PASSWORD: ""
          JWT_SECRET: test-secret-key

      - name: Build Docker image for service-produit
        run: |
          cd services/service-produit
          docker build -t ghcr.io/${{ github.repository_owner }}/service-produit:${{ github.sha }} .
          docker tag ghcr.io/${{ github.repository_owner }}/service-produit:${{ github.sha }} ghcr.io/${{ github.repository_owner }}/service-produit:latest

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker image for service-produit
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/service-produit:${{ github.sha }}
          docker push ghcr.io/${{ github.repository_owner }}/service-produit:latest

  # Job pour service-commande
  build-commande:
    if: needs.detect-changes.outputs.commande-changed == 'true' || github.event.inputs.service == 'all' || github.event.inputs.service == 'commande'
    needs: detect-changes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '21'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Debug - List directory structure for commande
        run: |
          echo "=== Services directory contents ==="
          ls -la services/
          echo "=== Service-commande directory contents ==="
          ls -la services/service-commande/

      - name: Build and test service-commande
        run: |
          echo "=== Finding service-commande directory ==="
          find . -name "service-commande" -type d
          echo "=== Finding pom.xml in service-commande ==="
          find . -path "*/service-commande/pom.xml" -type f
          
          # Try different possible paths
          if [ -d "services/service-commande" ]; then
            echo "Using services/service-commande"
            cd services/service-commande
          elif [ -d "service-commande" ]; then
            echo "Using service-commande"
            cd service-commande
          else
            echo "Service-commande directory not found, listing all directories:"
            find . -type d -name "*commande*" -o -name "*service*"
            exit 1
          fi
          
          echo "=== Current directory after cd ==="
          pwd
          echo "=== Contents of current directory ==="
          ls -la
          echo "=== Looking for pom.xml ==="
          find . -name "pom.xml" -type f
          echo "=== pom.xml exists? ==="
          ls -la pom.xml
          mvn clean test -Dspring.profiles.active=test
          mvn package -DskipTests
        env:
          SPRING_DATASOURCE_URL: jdbc:h2:mem:testdb
          SPRING_DATASOURCE_USERNAME: sa
          SPRING_DATASOURCE_PASSWORD: ""
          JWT_SECRET: test-secret-key

      - name: Build Docker image for service-commande
        run: |
          cd services/service-commande
          docker build -t ghcr.io/${{ github.repository_owner }}/service-commande:${{ github.sha }} .
          docker tag ghcr.io/${{ github.repository_owner }}/service-commande:${{ github.sha }} ghcr.io/${{ github.repository_owner }}/service-commande:latest

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker image for service-commande
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/service-commande:${{ github.sha }}
          docker push ghcr.io/${{ github.repository_owner }}/service-commande:latest

  # Job pour frontend
  build-frontend:
    if: needs.detect-changes.outputs.frontend-changed == 'true' || github.event.inputs.service == 'all' || github.event.inputs.service == 'frontend'
    needs: detect-changes
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      - name: Build Docker image for frontend
        run: |
          cd frontend
          docker build -t ghcr.io/${{ github.repository_owner }}/frontend:${{ github.sha }} .
          docker tag ghcr.io/${{ github.repository_owner }}/frontend:${{ github.sha }} ghcr.io/${{ github.repository_owner }}/frontend:latest

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker image for frontend
        run: |
          docker push ghcr.io/${{ github.repository_owner }}/frontend:${{ github.sha }}
          docker push ghcr.io/${{ github.repository_owner }}/frontend:latest

  # Job de déploiement
  deploy:
    if: github.ref == 'refs/heads/master' && (needs.build-client.result == 'success' || needs.build-produit.result == 'success' || needs.build-commande.result == 'success' || needs.build-frontend.result == 'success')
    needs: [build-client, build-produit, build-commande, build-frontend]
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to production
        run: |
          echo "🚀 Deploying updated services to production..."
          echo "✅ Services built successfully:"
          echo "  - Client: ${{ needs.build-client.result }}"
          echo "  - Produit: ${{ needs.build-produit.result }}"
          echo "  - Commande: ${{ needs.build-commande.result }}"
          echo "  - Frontend: ${{ needs.build-frontend.result }}"
          
          # Ici vous pouvez ajouter votre logique de déploiement
          # Par exemple : kubectl apply, docker-compose up, etc.
          echo "📦 Docker images pushed to GHCR:"
          echo "  - ghcr.io/${{ github.repository_owner }}/service-client:${{ github.sha }}"
          echo "  - ghcr.io/${{ github.repository_owner }}/service-produit:${{ github.sha }}"
          echo "  - ghcr.io/${{ github.repository_owner }}/service-commande:${{ github.sha }}"
          echo "  - ghcr.io/${{ github.repository_owner }}/frontend:${{ github.sha }}"
